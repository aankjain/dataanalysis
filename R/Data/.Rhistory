colnames(currentOutput) <- c("QTR", "ActualVal", "Forecast",
"ForecastActual", "Error",
"ErrorPercent", "SS", "AbsoluteErr",
"StandardizedErr")
output <- rbind(output, currentOutput)
}
write.table(x=output, file=output_location,row.names=FALSE, quote=FALSE,
sep = '\t')
RRMSE <- sqrt(SumSq/CountSq)
RMAE <- AbsErr/CountSq
RRMSE
RMAE
# Internal
ExpediaData <- expeData$TotalSales
ExpediaData <- expeData$BSGDistributor
ExpediaData <- expeData$SBSupply
ExpediaData <- expeData$Reviews
internalData <- na.exclude(ExpediaData)
InternalcurrentData <- data.frame(internalData)[1:length(internalData)-1,]
InternalExpeTS <- ts(InternalcurrentData, frequency=4, start=c(start_yr,3))
forecast.HoltWinters(HoltWinters(x=log(InternalExpeTS),
seasonal="multiplicative"),
h=1)
forecastres <- forecast.HoltWinters(HoltWinters(x=log(InternalExpeTS),
seasonal="multiplicative"),
h=1)$residuals
# 7 for merchat booking
type = 5
# for reviews
type = 4
fittedframe <- data.frame(
HoltWinters(x=log(InternalExpeTS),
seasonal="multiplicative")$fitted)
InternalStdev <- sd(InternalcurrentData)
output_internal = data.frame(ActualVal = expeData[6:nrow(expeData)-1,c(2,type)],
LogActualVal = log(expeData[6:nrow(expeData)-1,c(type)]),
ForecastVal = fittedframe$xhat,
Error = -1*forecastres,
SS = forecastres*forecastres,
StandardizedErr = -1*forecastres/InternalStdev
)
write.table(x=output_internal, file=internal_output_location,row.names=FALSE, quote=FALSE,
sep = '\t')
sep = '\t')
getwd()
# Librarier required
library(stringr)
rm(list=ls(all=TRUE))
# Get the working directory
getwd()
# To install packages
#install.packages("xlsx")
# Librarier required
library(stringr)
library(XLConnect)
library(stringr)
library(WriteXLS)
library(xlsx)
library(hash)
library(ggplot2)
library(forecast)
library(TTR)
# Remove all existing variables/data sets
rm(list=ls(all=TRUE))
# Get the working directory
getwd()
# To install packages
#install.packages("xlsx")
# Librarier required
library(stringr)
library(XLConnect)
library(stringr)
library(XLConnect)
library(stringr)
library(WriteXLS)
install.packages("XLConnect")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("TTR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
dir = "/Users/Ravi/Desktop/acm_data_analysis/dataanalysis/R"
location = str_c(dir, "SBH_HW_20130513.xlsx")
output_location = str_c(dir, "SBH_HW.txt")
internal_output_location = str_c(dir, "SBH_HW_Internal.txt")
freq = 4
start_period = 0*freq + 1
start_backtesting = 9
start_yr = 2008
expeData <- read.xlsx(file=location, sheetName="Data", header=T)
dir = "/Users/Ravi/Desktop/acm_data_analysis/dataanalysis/R/"
location = str_c(dir, "SBH_HW_20130513.xlsx")
output_location = str_c(dir, "SBH_HW.txt")
internal_output_location = str_c(dir, "SBH_HW_Internal.txt")
freq = 4
start_period = 0*freq + 1
start_backtesting = 9
start_yr = 2008
expeData <- read.xlsx(file=location, sheetName="Data", header=T)
dir = "/Users/Ravi/Desktop/acm_data_analysis/dataanalysis/R/"
location = str_c(dir, "SBH_HW_20130513.xlsx")
localtion
location
expeData <- read.xlsx(file=location, sheetName="Data", header=T)
expeData <- expeData[start_period:nrow(expeData),]
# Run back testing for Merchant Bookings
expeData
ExpediaData <- expeData$TotalSales
ExpediaData
SumSq = 0
CountSq = 0
AbsErr = 0
View(output)
View(output)
View(expeData)
output <- data.frame(QTR = factor(),
ActualVal=factor(),
Forecast = factor(),
ForecastActual = factor(),
Error = factor(),
ErrorPercent = factor(),
SS = factor(),
AbsoluteErr = factor(),
StandardizedErr = factor())
View(output)
colnames(output) <- c("QTR", "ActualVal", "Forecast",
"ForecastActual", "Error", "ErrorPercent",
"SS", "AbsoluteErr", "StandardizedErr")
#i = start_backtesting
for (i in start_backtesting:nrow(expeData)-1) {
i1 = i + 1
currentData <- data.frame(na.exclude(ExpediaData))[1:i,]
# Calculate the standard deviation
Stdev <- sd(currentData)
currentData
# Create the TS
ExpeTS <- ts(currentData, frequency=4, start=c(start_yr,3))
forecastVal <- forecast.HoltWinters(HoltWinters(x=log(ExpeTS),
seasonal="multiplicative"),
h=1)$mean
Err <- exp(forecastVal) - ExpediaData[i1:i1]
Err <- as.numeric(Err)
ErrPercent <- Err/ExpediaData[i1:i1]
SumSq <- SumSq + ErrPercent*ErrPercent
AbsErr <- AbsErr + abs(ErrPercent)
CountSq <- CountSq + 1
StdErr <- Err/Stdev
currentOutput = data.frame(QTR = expeData[[i1,2]],
ActualVal = ExpediaData[i1:i1],
Forecast = as.numeric(forecastVal),
ForecastActual = exp(as.numeric(forecastVal)),
Error = Err,
ErrorPercent = ErrPercent,
SS = SumSq,
AbsoluteErr = AbsErr,
StandardizedErr = StdErr)
colnames(currentOutput) <- c("QTR", "ActualVal", "Forecast",
"ForecastActual", "Error",
"ErrorPercent", "SS", "AbsoluteErr",
"StandardizedErr")
output <- rbind(output, currentOutput)
}
setwd('/Users/Ravi/Desktop/R')
library(XLConnect)
ls /var/tmp
getwd()
library(XLConnect)
# Remove all existing variables/data sets
rm(list=ls(all=TRUE))
# Get the working directory
getwd()
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("XLConnect")
install.packages("xlsx", lib="/Users/Ravi/Desktop/R")
library(stringr)
library(XLConnect)
install.packages("XLConnect")
library(stringr)
library(stringr)
library(WriteXLS)
library(xlsx)
install.packages("WriteXLS")
library(WriteXLS)
library(xlsx)
library(hash)
install.packages("hash")
library("hash", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
dir = "/Users/Ravi/Desktop/acm_data_analysis/dataanalysis/R/"
location = str_c(dir, "SBH_HW_20130513.xlsx")
output_location = str_c(dir, "SBH_HW.txt")
internal_output_location = str_c(dir, "SBH_HW_Internal.txt")
freq = 4
start_period = 0*freq + 1
start_backtesting = 9
start_yr = 2008
expeData <- read.xlsx(file=location, sheetName="Data", header=T)
expeData <- expeData[start_period:nrow(expeData),]
# Extracting columns data
ExpediaData <- expeData$TotalSales
ExpediaData <- expeData$BSGDistributor
ExpediaData <- expeData$SBSupply
ExpediaData <- expeData$Reviews
SumSq = 0
CountSq = 0
AbsErr = 0
output <- data.frame(QTR = factor(),
ActualVal=factor(),
Forecast = factor(),
ForecastActual = factor(),
Error = factor(),
ErrorPercent = factor(),
SS = factor(),
AbsoluteErr = factor(),
StandardizedErr = factor())
colnames(output) <- c("QTR", "ActualVal", "Forecast",
"ForecastActual", "Error", "ErrorPercent",
"SS", "AbsoluteErr", "StandardizedErr")
# Back testing data
#i = start_backtesting
for (i in start_backtesting:nrow(expeData)-1) {
i1 = i + 1
currentData <- data.frame(na.exclude(ExpediaData))[1:i,]
# Calculate the standard deviation
Stdev <- sd(currentData)
# Create the TS
ExpeTS <- ts(currentData, frequency=4, start=c(start_yr,3))
forecastVal <- forecast.HoltWinters(HoltWinters(x=log(ExpeTS),
seasonal="multiplicative"),
h=1)$mean
Err <- exp(forecastVal) - ExpediaData[i1:i1]
Err <- as.numeric(Err)
ErrPercent <- Err/ExpediaData[i1:i1]
SumSq <- SumSq + ErrPercent*ErrPercent
AbsErr <- AbsErr + abs(ErrPercent)
CountSq <- CountSq + 1
StdErr <- Err/Stdev
currentOutput = data.frame(QTR = expeData[[i1,2]],
ActualVal = ExpediaData[i1:i1],
Forecast = as.numeric(forecastVal),
ForecastActual = exp(as.numeric(forecastVal)),
Error = Err,
ErrorPercent = ErrPercent,
SS = SumSq,
AbsoluteErr = AbsErr,
StandardizedErr = StdErr)
colnames(currentOutput) <- c("QTR", "ActualVal", "Forecast",
"ForecastActual", "Error",
"ErrorPercent", "SS", "AbsoluteErr",
"StandardizedErr")
output <- rbind(output, currentOutput)
}
write.table(x=output, file=output_location,row.names=FALSE, quote=FALSE,
sep = '\t')
RRMSE <- sqrt(SumSq/CountSq)
RMAE <- AbsErr/CountSq
RRMSE
RMAE
# Internal
ExpediaData <- expeData$TotalSales
ExpediaData <- expeData$BSGDistributor
ExpediaData <- expeData$SBSupply
ExpediaData <- expeData$Reviews
internalData <- na.exclude(ExpediaData)
InternalcurrentData <- data.frame(internalData)[1:length(internalData)-1,]
InternalExpeTS <- ts(InternalcurrentData, frequency=4, start=c(start_yr,3))
forecast.HoltWinters(HoltWinters(x=log(InternalExpeTS),
seasonal="multiplicative"),
h=1)
forecastres <- forecast.HoltWinters(HoltWinters(x=log(InternalExpeTS),
seasonal="multiplicative"),
h=1)$residuals
# 7 for merchat booking
type = 5
# for reviews
type = 4
fittedframe <- data.frame(
HoltWinters(x=log(InternalExpeTS),
seasonal="multiplicative")$fitted)
InternalStdev <- sd(InternalcurrentData)
output_internal = data.frame(ActualVal = expeData[6:nrow(expeData)-1,c(2,type)],
LogActualVal = log(expeData[6:nrow(expeData)-1,c(type)]),
ForecastVal = fittedframe$xhat,
Error = -1*forecastres,
SS = forecastres*forecastres,
StandardizedErr = -1*forecastres/InternalStdev
)
write.table(x=output_internal, file=internal_output_location,row.names=FALSE, quote=FALSE,
sep = '\t')
rm(list=ls(all=TRUE))
setwd("/Users/Ravi/Desktop/acm_data_analysis/dataanalysis/R/")
getwd()
# Reading data from a particular sheet of an
#xls file and reading the
# data from specified columns and rows
#and handling of dates
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
yieldData<- readWorksheetFromFile("Data-R-Training.xlsx",
sheet = "data",
startRow = 3, endRow = 323,
startCol = 1, endCol = 6)
yieldData<- readWorksheetFromFile("DataRTraining.xlsx",
sheet = "data",
startRow = 3, endRow = 323,
startCol = 1, endCol = 6)
yieldData<- readWorksheetFromFile("DataRTraining.xlsx",
sheet = "data",
startRow = 3, endRow = 323,
startCol = 1, endCol = 6)
setwd("/Users/Ravi/Desktop/acm_data_analysis/dataanalysis/R/")
getwd()
# Reading data from a particular sheet of an
#xls file and reading the
# data from specified columns and rows
#and handling of dates
library(XLConnect)
yieldData<- readWorksheetFromFile("DataRTraining.xlsx",
sheet = "data",
startRow = 3, endRow = 323,
startCol = 1, endCol = 6)
yieldData<- readWorksheetFromFile("/Users/Ravi/Desktop/acm_data_analysis/dataanalysis/R/DataRTraining.xlsx",
sheet = "data",
startRow = 3, endRow = 323,
startCol = 1, endCol = 6)
setwd("/Users/Ravi/Desktop/acm_data_analysis/dataanalysis/R/data/")
getwd()
# Reading data from a particular sheet of an
#xls file and reading the
# data from specified columns and rows
#and handling of dates
library(XLConnect)
yieldData<- readWorksheetFromFile("DataRTraining.xlsx",
sheet = "data",
startRow = 3, endRow = 323,
startCol = 1, endCol = 6)
View(yieldData)
head(yieldData)
attach(yieldData)
colnames(yieldData)=c("Week", "Yield.1", "Yield.2",
"Input", "Price1", "Price2")
summary(Input)
summary(yieldData)
str(yieldData)
qnty.1 <- Yield.1*Input
qnty.2 <- Yield.2*Input
yieldData2 <- data.frame(yieldData,
qnty.1,qnty.2)
head(yieldData2, 10L)
qnty.1 <- Yield.1*Input
Input = yieldData.Input
Input = yieldData$Input
summary(Input)
str(Input)
qnty.1 <- Yield.1*Input
qnty.2 <- Yield.2*Input
# Adding the 2 quantity variables to the data
yieldData2 <- data.frame(yieldData,
qnty.1,qnty.2)
head(yieldData2, 10L)
yieldData2[20:50,2:4]
yieldData2[20:50,-c(2:4)]
names(yieldData2)
summary(yieldData2)
str(yieldData2)
attach(yieldData)
library(lubridate)
install.packages("lubridate")
library(lubridate)
year <- as.factor(year(Week))
fix(year)
quarter <- as.factor(paste(quarter(Week),"-",year))
month <- as.factor(paste(month(Week),"-",year))
yieldData100 <- data.frame(yieldData2,month,quarter,year)
head(yieldData100)
txt.data <- read.table("univBankT.txt", header=T,
dec=".",
col.names=c("ID", "age",	"exp",	"inc",
"zip",	"family",	"ccavg",
"edu",	"mortgage"),
na.strings="NA",sep="\t")
View(txt.data)
names(txt.data)
dim(txt.data)
summary(txt.data)
str(txt.data)
head(txt.data, 20)
tail(txt.data)
is.na(txt.data)
sum(is.na(txt.data))
#Reading from a CSV file
rm(list=ls(all=TRUE))
univ=read.table('univBank.csv',
header=T,sep=',',
col.names=c("ID", "age",  "exp",	"inc",
"zip",	"family",
"edu",	"mortgage"))
head(univ)
sum(is.na(univ))
loanCalls <- read.table("loanCalls.csv", header=T, sep=",",
col.names=c("ID", "infoReq", "loan"),
dec=".", na.strings="NA")
cc <- read.table("cc.csv", header=T, sep=",",
col.names=c("ID", "Month", "Monthly"),
dec=".", na.strings="NA")
otherAccts <- read.table("otherAccts.csv", header=T, sep=",",
col.names=c("ID", "Var", "Val"),
dec=".", na.strings="NA")
#Demonstrate tapply, reshape, merge, innerjoin, outerjoin,
#commands
#We have the monthly credit card spending over 12 months.
#We need to compute monthly spendings
summary(cc)
cc$ID <- as.factor(cc$ID)
cc$Month <- as.factor(cc$Month)
summary(cc)
meanNA <- function(x){
a <-mean(x, na.rm=TRUE)
return(a)
}
ccAvg <- data.frame(seq(1,5000),
tapply(cc$Monthly, cc$ID, meanNA))
names(ccAvg)
colnames(ccAvg) <- c("ID", "ccAvg")
ccAvg$ID <- as.factor(ccAvg$ID)
otherAccts$ID <- as.factor(otherAccts$ID)
summary(ccAvg)
rm(cc)
#Other accounts need to be transposed
summary(otherAccts)
otherAccts$Val <- as.factor(otherAccts$Val)
summary(otherAccts)
library(reshape)#VVVVVIIIIIMMMMPPPP
otherAcctsT=data.frame(cast(otherAccts,
install.packages("reshape")
)
)
install.packages("reshape")
library(reshape)
otherAcctsT=data.frame(cast(otherAccts,
ID~Var,value="Val"))
summary(otherAcctsT)
univComp <- merge(univ,ccAvg,
by.x="ID",by.y="ID",
all=TRUE)  #inner join
ccAvg <- data.frame(seq(1,5000),
tapply(cc$Monthly, cc$ID, meanNA))
names(ccAvg)
colnames(ccAvg) <- c("ID", "ccAvg")
ccAvg$ID <- as.factor(ccAvg$ID)
otherAccts$ID <- as.factor(otherAccts$ID)
summary(ccAvg)
ccAvg <- data.frame(seq(1,5000),
tapply(cc$Monthly, cc$ID, meanNA))
cc <- read.table("cc.csv", header=T, sep=",",
col.names=c("ID", "Month", "Monthly"),
dec=".", na.strings="NA")
cc$ID <- as.factor(cc$ID)
cc$Month <- as.factor(cc$Month)
summary(cc)
otherAcctsT=data.frame(cast(otherAccts,
ID~Var,value="Val"))
summary(otherAcctsT)
# Merging
univComp <- merge(univ,ccAvg,
by.x="ID",by.y="ID",
all=TRUE)  #inner join
ccAvg <- data.frame(seq(1,5000),
tapply(cc$Monthly, cc$ID, meanNA))
summary(cc)
cc$ID <- as.factor(cc$ID)
cc$Month <- as.factor(cc$Month)
summary(cc)
cc <- read.table("cc.csv", header=T, sep=",",
col.names=c("ID", "Month", "Monthly"),
dec=".", na.strings="NA")
cc <- read.table("cc.csv", header=T, sep=",",
col.names=c("ID", "Month", "Monthly"),
dec=".", na.strings="NA")
summary(cc)
cc$ID <- as.factor(cc$ID)
cc$Month <- as.factor(cc$Month)
summary(cc)
meanNA <- function(x){
a <-mean(x, na.rm=TRUE)
return(a)
}
ccAvg <- data.frame(seq(1,5000),
tapply(cc$Monthly, cc$ID, meanNA))
names(ccAvg)
colnames(ccAvg) <- c("ID", "ccAvg")
ccAvg$ID <- as.factor(ccAvg$ID)
otherAccts$ID <- as.factor(otherAccts$ID)
summary(ccAvg)
summary(otherAccts)
otherAccts$Val <- as.factor(otherAccts$Val)
summary(otherAccts)
otherAcctsT=data.frame(cast(otherAccts,
ID~Var,value="Val"))
summary(otherAcctsT)
univComp <- merge(univ,ccAvg,
by.x="ID",by.y="ID",
all=TRUE)  #inner join
univComp <- merge(univComp, otherAcctsT,
by.x="ID", by.y="ID",
all=TRUE)
univComp <- merge(univComp, loanCalls,
by.x="ID", by.y="ID",
all=TRUE)
aggr(univComp)
library(VIM)
install.packages("VIM")
